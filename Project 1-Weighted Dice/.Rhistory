die <- 1:6
die
die %*% die
die %o% die
%t% die
die %t%
die
t(die)
t(die %o% die)
t(die * 1:3)
abc <- 7:12
t(die %o% abc)
die %o% abc
remove(abc)
t(die)
die
t(t(die))
load("~/R/Hands-On Programming with R/Project 1-Weighted Dice/.RData")
mean(die)
round(mean(die))
sample(die, size = 2)
sample(die, size = 2)
args(round)
sample(x=die, size = 2, replace = TRUE)
sample(x=die, size = 2, replace = TRUE)
sample(x=die, size = 2, replace = TRUE)
sample(x=die, size = 2, replace = TRUE)
sample(x=die, size = 2, replace = TRUE)
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
sample()
sample
roll <- function(){}
roll <- function(){
die <- 1:6
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
}
roll()
roll()
roll()
roll()
roll
roll2 <- function(die = 1:6){
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
}
roll2()
roll2()
roll2()
roll2 <- function(diePassed = 1:6){
+     dice <- sample(x = diePassed, size = 2, replace = TRUE)
+     sum(dice)
+ }
roll2 <- function(diePassed = 1:6){
dice <- sample(x = diePassed, size = 2, replace = TRUE)
sum(dice)
}
View(roll2)
View(roll2)
View(roll2)
remove(roll2())
remove(roll2)
roll2 <- function(diePassed = 1:6){
dice <- sample(x = diePassed, size = 2, replace = TRUE)
sum(dice)
}
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
roll2(diePassed = die)
remove(roll)
remove(roll2)
source('~/R/Hands-On Programming with R/Project 1-Weighted Dice/roll2.R')
roll2()
#roll function without arguments
roll <- function(){
die <- 1:6
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
}
library(ggplot2)
qplot
x <- c(1,5,3,4,2,9)
x
y <- x^3
y
qplot(x,y)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 2)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
x3 <- c(1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
qplot(x3, binwidth = 1)
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
qplot(rolls, binwidth = 5)
qplot(rolls, binwidth = 1)
?sample
#roll function without arguments
roll <- function(){
die <- 1:6
dice <- sample(x = die, size = 2, replace = TRUE,
prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
roll()
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
remove(x)
remove(y)
ssqrt(2)
sqrt(2)
sqrt(2)^2
sqrt(2)^2 - 2
# typeof function
# double, integer, character
d <- 1
typeof(d)
int <- 1L
typeof(int)
char <- "Hello!"
d <- 1
typeof(d)
char1 <- "1"
typeof(char1)
char2 <- "one"
typeof(char2)
??
?
;
?raw
??
;
hand <- c("ace", "king", "queen", "jack", "ten")
hand
typeof(hand)
hand1 <- matrix(c(hand, "spades", "spades", "spades", "spades", "spades", "spades"))
hand1
hand1 <- matrix(c(hand, "spades", "spades", "spades", "spades", "spades"), nrow = 5)
hand1
now <- Sys.time()
now
now
now
now
now
now
now
now <- Sys.time()
now
class(now)
unclass(now)
mil <- 10000000
mil
class(mil) <- c("POSIXct", "POSIXt" )
mil
mil <- 100000000
mil
class(mil) <- c("POSIXct", "POSIXt" )
mil
mil <- 10000000000
mil
class(mil) <- c("POSIXct", "POSIXt" )
mil
mil <- 100000000
mil
class(mil) <- c("POSIXct", "POSIXt" )
mil
want to check what happens if we store different type of data is atomic vector
card <- c("ace", "heart", 1)
card
card <- c("ace", "heart", 1)
card
#If a character string is present in atomic vector, R will convert everything else in the
#vector to character strings. If a vector only contains logicals and numbers, R will convert
#logicals to numbers. R uses same rules when you try to do math with logical values. e.g.
sum(c(TRUE, FALSE, TRUE)) #TRUE = 1, FALSE = 0
as.character(5)
as.logical(0)
as.numeric(F)
card <- list("ace", "hearts", 1)
card
remove(card, hand1, char, char1, char2, d, hand, int, mil, now)
df <- data.frame(face = c("ace", "six", "two"), suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
df
remove(df)
